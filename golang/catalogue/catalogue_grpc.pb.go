// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: catalogue/catalogue.proto

package catalogue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CatalogueService_CreateContainer_FullMethodName    = "/catalogue.v1.CatalogueService/CreateContainer"
	CatalogueService_CreateContentQuery_FullMethodName = "/catalogue.v1.CatalogueService/CreateContentQuery"
	CatalogueService_BuildCatalogue_FullMethodName     = "/catalogue.v1.CatalogueService/BuildCatalogue"
	CatalogueService_ListCatalogues_FullMethodName     = "/catalogue.v1.CatalogueService/ListCatalogues"
	CatalogueService_ListContent_FullMethodName        = "/catalogue.v1.CatalogueService/ListContent"
)

// CatalogueServiceClient is the client API for CatalogueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// service definition
type CatalogueServiceClient interface {
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)
	CreateContentQuery(ctx context.Context, in *CreateContentQueryRequest, opts ...grpc.CallOption) (*CreateContentQueryResponse, error)
	BuildCatalogue(ctx context.Context, in *BuildCatalogueRequest, opts ...grpc.CallOption) (*BuildCatalogueResponse, error)
	ListCatalogues(ctx context.Context, in *ListCataloguesRequest, opts ...grpc.CallOption) (*ListCataloguesResponse, error)
	ListContent(ctx context.Context, in *ListContentRequest, opts ...grpc.CallOption) (*ListContentResponse, error)
}

type catalogueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogueServiceClient(cc grpc.ClientConnInterface) CatalogueServiceClient {
	return &catalogueServiceClient{cc}
}

func (c *catalogueServiceClient) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateContainerResponse)
	err := c.cc.Invoke(ctx, CatalogueService_CreateContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueServiceClient) CreateContentQuery(ctx context.Context, in *CreateContentQueryRequest, opts ...grpc.CallOption) (*CreateContentQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateContentQueryResponse)
	err := c.cc.Invoke(ctx, CatalogueService_CreateContentQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueServiceClient) BuildCatalogue(ctx context.Context, in *BuildCatalogueRequest, opts ...grpc.CallOption) (*BuildCatalogueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildCatalogueResponse)
	err := c.cc.Invoke(ctx, CatalogueService_BuildCatalogue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueServiceClient) ListCatalogues(ctx context.Context, in *ListCataloguesRequest, opts ...grpc.CallOption) (*ListCataloguesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCataloguesResponse)
	err := c.cc.Invoke(ctx, CatalogueService_ListCatalogues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueServiceClient) ListContent(ctx context.Context, in *ListContentRequest, opts ...grpc.CallOption) (*ListContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContentResponse)
	err := c.cc.Invoke(ctx, CatalogueService_ListContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogueServiceServer is the server API for CatalogueService service.
// All implementations must embed UnimplementedCatalogueServiceServer
// for forward compatibility
//
// service definition
type CatalogueServiceServer interface {
	CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	CreateContentQuery(context.Context, *CreateContentQueryRequest) (*CreateContentQueryResponse, error)
	BuildCatalogue(context.Context, *BuildCatalogueRequest) (*BuildCatalogueResponse, error)
	ListCatalogues(context.Context, *ListCataloguesRequest) (*ListCataloguesResponse, error)
	ListContent(context.Context, *ListContentRequest) (*ListContentResponse, error)
	mustEmbedUnimplementedCatalogueServiceServer()
}

// UnimplementedCatalogueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogueServiceServer struct {
}

func (UnimplementedCatalogueServiceServer) CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (UnimplementedCatalogueServiceServer) CreateContentQuery(context.Context, *CreateContentQueryRequest) (*CreateContentQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContentQuery not implemented")
}
func (UnimplementedCatalogueServiceServer) BuildCatalogue(context.Context, *BuildCatalogueRequest) (*BuildCatalogueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildCatalogue not implemented")
}
func (UnimplementedCatalogueServiceServer) ListCatalogues(context.Context, *ListCataloguesRequest) (*ListCataloguesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCatalogues not implemented")
}
func (UnimplementedCatalogueServiceServer) ListContent(context.Context, *ListContentRequest) (*ListContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContent not implemented")
}
func (UnimplementedCatalogueServiceServer) mustEmbedUnimplementedCatalogueServiceServer() {}

// UnsafeCatalogueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogueServiceServer will
// result in compilation errors.
type UnsafeCatalogueServiceServer interface {
	mustEmbedUnimplementedCatalogueServiceServer()
}

func RegisterCatalogueServiceServer(s grpc.ServiceRegistrar, srv CatalogueServiceServer) {
	s.RegisterService(&CatalogueService_ServiceDesc, srv)
}

func _CatalogueService_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_CreateContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).CreateContainer(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_CreateContentQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContentQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).CreateContentQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_CreateContentQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).CreateContentQuery(ctx, req.(*CreateContentQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_BuildCatalogue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildCatalogueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).BuildCatalogue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_BuildCatalogue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).BuildCatalogue(ctx, req.(*BuildCatalogueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_ListCatalogues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCataloguesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).ListCatalogues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_ListCatalogues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).ListCatalogues(ctx, req.(*ListCataloguesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_ListContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).ListContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_ListContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).ListContent(ctx, req.(*ListContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogueService_ServiceDesc is the grpc.ServiceDesc for CatalogueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalogue.v1.CatalogueService",
	HandlerType: (*CatalogueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContainer",
			Handler:    _CatalogueService_CreateContainer_Handler,
		},
		{
			MethodName: "CreateContentQuery",
			Handler:    _CatalogueService_CreateContentQuery_Handler,
		},
		{
			MethodName: "BuildCatalogue",
			Handler:    _CatalogueService_BuildCatalogue_Handler,
		},
		{
			MethodName: "ListCatalogues",
			Handler:    _CatalogueService_ListCatalogues_Handler,
		},
		{
			MethodName: "ListContent",
			Handler:    _CatalogueService_ListContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalogue/catalogue.proto",
}
