// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: catalogue/catalogue.proto

package catalogue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CatalogueService_CreateContainer_FullMethodName = "/CatalogueService/CreateContainer"
	CatalogueService_CreateQuery_FullMethodName     = "/CatalogueService/CreateQuery"
	CatalogueService_ListContainers_FullMethodName  = "/CatalogueService/ListContainers"
	CatalogueService_ListContent_FullMethodName     = "/CatalogueService/ListContent"
	CatalogueService_ListQueries_FullMethodName     = "/CatalogueService/ListQueries"
	CatalogueService_ListUsers_FullMethodName       = "/CatalogueService/ListUsers"
	CatalogueService_BuildContainer_FullMethodName  = "/CatalogueService/BuildContainer"
	CatalogueService_BuildContent_FullMethodName    = "/CatalogueService/BuildContent"
)

// CatalogueServiceClient is the client API for CatalogueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// service definition
type CatalogueServiceClient interface {
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)
	CreateQuery(ctx context.Context, in *CreateQueryRequest, opts ...grpc.CallOption) (*CreateQueryResponse, error)
	ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error)
	ListContent(ctx context.Context, in *ListContentRequest, opts ...grpc.CallOption) (*ListContentResponse, error)
	ListQueries(ctx context.Context, in *ListQueriesRequest, opts ...grpc.CallOption) (*ListQueriesResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	BuildContainer(ctx context.Context, in *BuildContainerRequest, opts ...grpc.CallOption) (*BuildContainerResponse, error)
	BuildContent(ctx context.Context, in *BuildContentRequest, opts ...grpc.CallOption) (*BuildContentResponse, error)
}

type catalogueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogueServiceClient(cc grpc.ClientConnInterface) CatalogueServiceClient {
	return &catalogueServiceClient{cc}
}

func (c *catalogueServiceClient) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateContainerResponse)
	err := c.cc.Invoke(ctx, CatalogueService_CreateContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueServiceClient) CreateQuery(ctx context.Context, in *CreateQueryRequest, opts ...grpc.CallOption) (*CreateQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQueryResponse)
	err := c.cc.Invoke(ctx, CatalogueService_CreateQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueServiceClient) ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContainersResponse)
	err := c.cc.Invoke(ctx, CatalogueService_ListContainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueServiceClient) ListContent(ctx context.Context, in *ListContentRequest, opts ...grpc.CallOption) (*ListContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContentResponse)
	err := c.cc.Invoke(ctx, CatalogueService_ListContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueServiceClient) ListQueries(ctx context.Context, in *ListQueriesRequest, opts ...grpc.CallOption) (*ListQueriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueriesResponse)
	err := c.cc.Invoke(ctx, CatalogueService_ListQueries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, CatalogueService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueServiceClient) BuildContainer(ctx context.Context, in *BuildContainerRequest, opts ...grpc.CallOption) (*BuildContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildContainerResponse)
	err := c.cc.Invoke(ctx, CatalogueService_BuildContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueServiceClient) BuildContent(ctx context.Context, in *BuildContentRequest, opts ...grpc.CallOption) (*BuildContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildContentResponse)
	err := c.cc.Invoke(ctx, CatalogueService_BuildContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogueServiceServer is the server API for CatalogueService service.
// All implementations must embed UnimplementedCatalogueServiceServer
// for forward compatibility
//
// service definition
type CatalogueServiceServer interface {
	CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	CreateQuery(context.Context, *CreateQueryRequest) (*CreateQueryResponse, error)
	ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error)
	ListContent(context.Context, *ListContentRequest) (*ListContentResponse, error)
	ListQueries(context.Context, *ListQueriesRequest) (*ListQueriesResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	BuildContainer(context.Context, *BuildContainerRequest) (*BuildContainerResponse, error)
	BuildContent(context.Context, *BuildContentRequest) (*BuildContentResponse, error)
	mustEmbedUnimplementedCatalogueServiceServer()
}

// UnimplementedCatalogueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogueServiceServer struct {
}

func (UnimplementedCatalogueServiceServer) CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (UnimplementedCatalogueServiceServer) CreateQuery(context.Context, *CreateQueryRequest) (*CreateQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuery not implemented")
}
func (UnimplementedCatalogueServiceServer) ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainers not implemented")
}
func (UnimplementedCatalogueServiceServer) ListContent(context.Context, *ListContentRequest) (*ListContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContent not implemented")
}
func (UnimplementedCatalogueServiceServer) ListQueries(context.Context, *ListQueriesRequest) (*ListQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueries not implemented")
}
func (UnimplementedCatalogueServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedCatalogueServiceServer) BuildContainer(context.Context, *BuildContainerRequest) (*BuildContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildContainer not implemented")
}
func (UnimplementedCatalogueServiceServer) BuildContent(context.Context, *BuildContentRequest) (*BuildContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildContent not implemented")
}
func (UnimplementedCatalogueServiceServer) mustEmbedUnimplementedCatalogueServiceServer() {}

// UnsafeCatalogueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogueServiceServer will
// result in compilation errors.
type UnsafeCatalogueServiceServer interface {
	mustEmbedUnimplementedCatalogueServiceServer()
}

func RegisterCatalogueServiceServer(s grpc.ServiceRegistrar, srv CatalogueServiceServer) {
	s.RegisterService(&CatalogueService_ServiceDesc, srv)
}

func _CatalogueService_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_CreateContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).CreateContainer(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_CreateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).CreateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_CreateQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).CreateQuery(ctx, req.(*CreateQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_ListContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).ListContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_ListContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).ListContainers(ctx, req.(*ListContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_ListContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).ListContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_ListContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).ListContent(ctx, req.(*ListContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_ListQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).ListQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_ListQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).ListQueries(ctx, req.(*ListQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_BuildContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).BuildContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_BuildContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).BuildContainer(ctx, req.(*BuildContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_BuildContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueServiceServer).BuildContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_BuildContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueServiceServer).BuildContent(ctx, req.(*BuildContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogueService_ServiceDesc is the grpc.ServiceDesc for CatalogueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CatalogueService",
	HandlerType: (*CatalogueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContainer",
			Handler:    _CatalogueService_CreateContainer_Handler,
		},
		{
			MethodName: "CreateQuery",
			Handler:    _CatalogueService_CreateQuery_Handler,
		},
		{
			MethodName: "ListContainers",
			Handler:    _CatalogueService_ListContainers_Handler,
		},
		{
			MethodName: "ListContent",
			Handler:    _CatalogueService_ListContent_Handler,
		},
		{
			MethodName: "ListQueries",
			Handler:    _CatalogueService_ListQueries_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _CatalogueService_ListUsers_Handler,
		},
		{
			MethodName: "BuildContainer",
			Handler:    _CatalogueService_BuildContainer_Handler,
		},
		{
			MethodName: "BuildContent",
			Handler:    _CatalogueService_BuildContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalogue/catalogue.proto",
}
